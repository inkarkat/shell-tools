#!/bin/bash
shopt -qs extglob

: ${REVERSEFILEARGS_FILE_MARKER='{}'}
fileMarker="$REVERSEFILEARGS_FILE_MARKER"; unset REVERSEFILEARGS_FILE_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--require-file] -c|--command "COMMANDLINE" | SIMPLECOMMAND [...] [--] [FILE [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND with all FILE arguments reversed (from last to first) (${fileMarker:+either}
appended to${fileMarker:+ or replacing any $fileMarker marker inside} COMMANDLINE).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --require-file	Fail with 99 if no FILE arguments have been given.
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" 'less /etc/apt/apt.conf.d/*'
}

isRequireFile=
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--require-file)	shift; isRequireFile=t;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		typeset -a files=()
			if ! contains '--' "$@"; then
			    # Consume existing FILEs from behind.
			    while [ $# -gt 0 ]
			    do
				lastArg="${!#}"
				[ -e "$lastArg" ] || break
				files=("$lastArg" "${files[@]}")
				set -- "${@:1:$(($#-1))}"
			    done
			fi

			if [ $# -gt 0 ]; then
			    typeset -a cmd=()
			    while [ $# -gt 0 ] && [ "$1" != '--' ]
			    do
				cmd+=("$1")
				shift
			    done
			    if [ "$isNeedEval" ]; then
				# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
				# undo the effects of eval.
				printf -v quotedSimpleCommand '%q ' "${cmd[@]}"
				printf -v escapedFileMarker %q "$fileMarker"
				commands+=(${commands:+;} "${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
			    else
				commands+=(${commands:+;} "${cmd[@]}")
			    fi
			fi

			if [ ${#files[@]} -gt 0 ]; then
			    set -- "$@" "${files[@]}"
			    break
			fi
			;;
    esac
done
if [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
elif [ "$isRequireFile" ] && [ $# -eq 0 ]; then
    echo 'ERROR: No FILE(s) passed.'
    exit 99
fi >&2

typeset -a reversedFiles=()
for file
do
    reversedFiles=("$file" "${reversedFiles[@]}")
done


if [ "$isNeedEval" ]; then
    printf -v quotedFiles '%q ' "${reversedFiles[@]}"; quotedFiles="${quotedFiles% }"
    typeset -a interpolatedCommands=("${commands[@]//"$fileMarker"/$quotedFiles}")
    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] && interpolatedCommands+=("$quotedFiles")

    eval "${interpolatedCommands[@]}"
else
    didInterpolate=
    typeset -a interpolatedCommands=()
    for c in "${commands[@]}"
    do
    if [ "$c" = "$fileMarker" ]; then
	interpolatedCommands+=("${reversedFiles[@]}")
	didInterpolate=t
    else
	interpolatedCommands+=("$c")
    fi
    done
    [ "$didInterpolate" ] || interpolatedCommands+=("${reversedFiles[@]}")

    "${interpolatedCommands[@]}"
fi
