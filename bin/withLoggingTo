#!/bin/bash
set -o pipefail
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" 'LOGFILESPEC [-T|--timestamp [--human|--short|--sortable] [--no-millis] [-s|--separator SEP] [-f|--field-separator SEP] [-d|--date DATE] [--prefix PREFIX]] [-a|--append] [-t|--tee] [-1|--stdout|-2|--stderr] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)]"
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND with all of its output logged to LOGFILESPEC.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --timestamp|-T	Prepend a timestamp to individual logged lines.
			Arguments for "timestamp" are forwarded.
    --append|-a		Append to LOGFILESPEC instead of overwriting existing
			contents.
    --tee|-t		Also print the output in addition to logging it.
    --stdout|-1		Only log output to standard output; error output is
			output normally.
    --stderr|-2		Only log error output; other output is output normally.
    --command|-c CMD	The command line to be captured. When this is a simple
			command, it can also be passed as such.
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
}

case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac
if [ $# -eq 0 ]; then
    echo 'ERROR: No LOGFILESPEC passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2
logFilespec="${1:?}"; shift

isTimestamp=
typeset -a timestampArgs=()
redirPrefix=
redirOp='>'
redirSuffix='2>&1'
isTee=
teePrefix='2>&1'
teeSuffix=
isBare=
isNeedEval=
typeset -a commands=()
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	--timestamp|-T)	shift; isTimestamp=t;;
	--@(human|short|sortable|no-millis))
			timestampArgs+=("$1"); shift;;
	-[dfs])		timestampArgs+=("$1" "$2"); shift; shift;;
	--@(field-separator|separator|date|prefix))
			timestampArgs+=("$1" "$2"); shift; shift;;

	--append|-a)	shift; redirOp='>>'; teeArg='--append';;
	--tee|-t)	shift; isTee=t;;
	--stdout|-1)	shift; redirSuffix=''; teePrefix='';;
	--stderr|-2)	shift; redirPrefix='2'; redirSuffix=''; teePrefix='3>&1 1>&2 2>&3 3>&-'; teeSuffix='3>&1 1>&2 2>&3 3>&-';;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("$@")
    fi
fi

execute()
{
    if [ ${#commands[@]} -eq 0 ]; then
	if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	    bash "${bashArgs[@]}" -
	else
	    ${runWithCommand:?} "${runWithPromptArgs[@]}"
	fi
    elif [ "$isNeedEval" ]; then
	eval "${commands[@]}"
    else
	"${commands[@]}"
    fi
}

if [ "$isTimestamp" ]; then
    if [ "$isTee" ]; then
	eval "{ execute ${teePrefix} | tee >(timestamp \"\${timestampArgs[@]}\" - ${redirOp} \"\$logFilespec\"); } ${teeSuffix}"
    else
	eval "{ execute | timestamp \"\${timestampArgs[@]}\" - ${redirOp} \"\$logFilespec\"; }"
    fi
elif [ "$isTee" ]; then
    eval "{ execute ${teePrefix} | tee $teeArg -- \"\$logFilespec\"; } ${teeSuffix}"
else
    eval "execute ${redirPrefix}${redirOp} \"\$logFilespec\" ${redirSuffix}"
fi
