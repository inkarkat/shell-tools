#!/bin/bash

: ${TEMPFILE_FILE_MARKER='{}'}
fileMarker="$TEMPFILE_FILE_MARKER"; unset TEMPFILE_FILE_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | [TMPDIR=DIR] %q %s\n' "$(basename "$1")" '[-d|--directory DIR] [-b|--basename BASE] [-e|--extension EXT] [-c|--command "COMMANDLINE" [-c ...] [--] SIMPLECOMMAND [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Capture output from stdin into a temp file whose name is then printed / passed
to COMMAND (${fileMarker:+either }appended${fileMarker:+ or replacing any $fileMarker marker }inside COMMANDLINE).
Additionally, statistics about the amount of captured text is printed to stderr.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --directory|-d DIR	Use (and create) a subdirectory DIR inside the temp
			directory to store the temp file in.
    --basename|-b BASE	Use BASE as the prefix of the temp file name.
    --extension|-e EXT	Use EXT as the temp file extension.
    --command|-c CMD	Execute CMD as a command-line, ${fileMarker:+either }appending${fileMarker:+ or
			replacing any $fileMarker marker} inside COMMANDLINE the temp
			filespec.
HELPTEXT
}

subdir=
basename=
extension=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--directory|-d)	shift; subdir="${1:?}"; shift;;
	--basename|-b)	shift; basename="$1"; shift;;
	--extension|-e)	shift; extension="$1"; shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	printf -v escapedFileMarker %q "$fileMarker"
	commands+=(${commands:+;} "${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
    else
	commands=("$@")
    fi
fi
[ -n "$basename" ] || basename="$(basename -- "$0")"

if [ -n "$subdir" ]; then
    tempDirspec="${TMPDIR:-/tmp}/${subdir}"
    mkdir --parents -- "$tempDirspec" || exit 3
    readonly tempFilespec="$(TMPDIR="$tempDirspec" mktemp --tmpdir "${basename}-XXXXXX${extension:+.}${extension}" 2>/dev/null || echo "${tempDirspec}/${basename}.$$${RANDOM}${extension:+.}${extension}")"
else
    readonly tempFilespec="$(mktemp --tmpdir "${basename}-XXXXXX${extension:+.}${extension}" 2>/dev/null || echo "${TMPDIR:-/tmp}/${basename}.$$${RANDOM}${extension:+.}${extension}")"
fi

cat > "$tempFilespec"
read lineCnt wordCnt byteCnt _ < <(wc -- "$tempFilespec")
lineCntPlural=s; [ $lineCnt -eq 1 ] && lineCntPlural=
wordCntPlural=s; [ $wordCnt -eq 1 ] && wordCntPlural=
byteCntPlural=s; [ $byteCnt -eq 1 ] && byteCntPlural=

printf >&2 '%d line%s, %d word%s, %d byte%s read\n' "$lineCnt" "$lineCntPlural" "$wordCnt" "$wordCntPlural" "$byteCnt" "$byteCntPlural"

if [ ${#commands[@]} -eq 0 ]; then
    printf '%s\n' "$tempFilespec"
else
    typeset -a f=("$tempFilespec")
    [ "$isNeedEval" ] && printf -v tempFilespec '%q' "$tempFilespec"
    typeset -a interpolatedCommands=("${commands[@]//"$fileMarker"/$tempFilespec}")
    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] || f=()
    if [ "$isNeedEval" ]; then
	eval "${interpolatedCommands[@]}" '"${f[@]}"'
    else
	"${interpolatedCommands[@]}" "${f[@]}"
    fi
fi
