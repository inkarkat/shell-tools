#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" 'DIR -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)]"
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND while DIR is the current working directory.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
This is like (cd DIR && COMMAND), but this can be passed to commands that take
just a SIMPLECOMMAND.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such.
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
}

case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
esac

if [ $# -eq 0 ]; then
    echo 'ERROR: No DIR passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2
if ! cd "$1" 2>/dev/null; then
    printf >&2 '%s: No such directory.\n' "$1"
    exit 1
fi
shift

isBare=
typeset -a commands=()
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); shift;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+=(${commands:+;} "${quotedSimpleCommand% }")
fi

if [ ${#commands[@]} -eq 0 ]; then
    if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	bash "${bashArgs[@]}" -
    else
	${runWithCommand:?} "${runWithPromptArgs[@]}"
    fi
else
    eval "${commands[@]}"
fi
