#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${WITHOUTPUTTOSINK_COMMAND_JOINER=;}
: ${WITHOUTPUTTOSINK_SINKCOMMAND_JOINER=|}
: ${WITHOUTPUTTOSINK_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "-s|--sink-command SINK-COMMANDLINE | -S|--sink-exec SIMPLE-SINK-COMMAND [...] $WITHOUTPUTTOSINK_EXEC_END [...] [-t|--tee] [-1|--stdout|-2|--stderr] -c|--command \"COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] ${WITHOUTPUTTOSINK_EXEC_END} [--exec ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]"
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)]"
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND with all of its output piped into SINK-COMMAND(s).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    -s|--sink-command SINK-COMMAND
			Execute SINK-COMMAND with the output piped into it.
			Multiple SINK-COMMANDs are joined with | as pipeline
			steps.
    -S|--sink-exec SINK-COMMAND [...] $WITHOUTPUTTOSINK_EXEC_END
			Execute SINK-COMMAND with the output piped into it; all
			following arguments are taken to be arguments to the
			SINK-COMMAND until an argument consisting of '${WITHOUTPUTTOSINK_EXEC_END}' is
			encountered. Multiple SINK-COMMANDs are joined with | as
			pipeline steps.
    --tee|-t		Also print the output in addition to piping it.
    --stdout|-1		Only pipe output to standard output; error output is
			output normally.
    --stderr|-2		Only pipe error output; other output is output normally.
    --command|-c CMD	The command line to be captured. When this is a simple
			command, it can also be passed as such.
    --exec CMD [...] ${WITHOUTPUTTOSINK_EXEC_END}	Execute CMD; all following arguments are taken to be
			arguments to the CMD until an argument consisting of
			'${WITHOUTPUTTOSINK_EXEC_END}' is encountered.
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT
SEE ALSO:
- withOutputToSinkBasedOnStatus captures all output and then pipes it to
  different sink commands based on the command's exit status.
- withOutputToSinkBasedOnMatch captures all output and then pipes it to
  different sink commands based on the output matching a pattern (or not)

EXIT STATUS:
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    *   any exit status from COMMAND(s); the exit status from SINK-COMMAND is
	lost
HELPTEXT
}

isTee=
teePrefix='2>&1'
teeSuffix=
isBare=
sinkCommands=
commands=
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--tee|-t)	shift; isTee=t;;
	--stdout|-1)	shift; teePrefix='';;
	--stderr|-2)	shift; teePrefix='3>&1 1>&2 2>&3 3>&-'; teeSuffix='3>&1 1>&2 2>&3 3>&-';;
	--sink-command|-s)
			shift; sinkCommands+="${sinkCommands:+ $WITHOUTPUTTOSINK_SINKCOMMAND_JOINER }$1"; shift;;
	--sink-exec|-S)	shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$WITHOUTPUTTOSINK_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: -S|--sink-exec command must be concluded with '${WITHOUTPUTTOSINK_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			sinkCommands+="${sinkCommands:+ $WITHOUTPUTTOSINK_SINKCOMMAND_JOINER }${cmd}"
			;;
	--command|-c)	shift; commands+="${commands:+ $WITHOUTPUTTOSINK_COMMAND_JOINER }$1"; shift;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$WITHOUTPUTTOSINK_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${WITHOUTPUTTOSINK_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ $WITHOUTPUTTOSINK_COMMAND_JOINER }${cmd}"
			;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+="${commands:+ $WITHOUTPUTTOSINK_COMMAND_JOINER }${quotedSimpleCommand% }"
fi
if [ -z "$sinkCommands" ]; then
    echo "ERROR: No SINK-COMMAND(s) specified; need to pass -s|--sink-command \"COMMANDLINE\", or -S|--sink-exec SIMPLE-SINK-COMMAND [...] $WITHOUTPUTTOSINK_EXEC_END"
    echo
    printUsage "$0"
    exit 2
fi >&2

execute()
{
    if [ -z "$commands" ]; then
	if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	    bash "${bashArgs[@]}" -
	else
	    ${runWithCommand:?} "${runWithPromptArgs[@]}"
	fi
    else
	eval "$commands"
    fi
}

eval "{ execute ${teePrefix} | ${isTee:+"tee >("}" "$sinkCommands" "${isTee:+)}; } ${teeSuffix}"
