#!/bin/bash

: ${WITHPID_PID_MARKER='{}'}
pidMarker="$WITHPID_PID_MARKER"; unset WITHPID_PID_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-s|--source-command SOURCE-COMMANDLINE -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" '[...] [--bare|[--trailing-prompt|--no-trailing-prompt] [--emulate-prompt] [--worst-status]]'
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute SOURCE-COMMAND (asynchronously) and ${pidMarker:+either }append${pidMarker:+ (or replace any $pidMarker
marker with)} the process ID to COMMAND.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --source-command|-s SOURCE-COMMANDLINE
			Execute SOURCE-COMMAND as a command-line asynchronously.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such.
    --bare		Do not print a status line before and after launching
			the COMMAND.
    --trailing-prompt	Customizations of the prompt emulation around COMMAND;
    --no-trailing-prompt cp. runWithPrompt
    --emulate-prompt
    --worst-status
EXIT STATUS:
    0	Complete success.
    2	Bad invocation, wrong or missing command-line arguments.
    126	Failed to invoke SOURCE-COMMAND.
    *	Any error from COMMAND is returned as-is.
HELPTEXT
}

isBare=
isNeedEval=
typeset -a commands=()
typeset -a runWithPromptArgs=()
sourceCommand=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--source-command|-s)
			shift; sourceCommand="$1"; shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--bare)		shift; isBare=t;;
	--no-trailing-prompt|--trailing-prompt|--emulate-prompt|--worst-status)  runWithPromptArgs+=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	printf -v escapedPidMarker %q "$pidMarker"
	commands+=(${commands:+;} "${quotedSimpleCommand//"$escapedPidMarker"/$pidMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
    else
	commands=("$@")
    fi
fi
if [ -z "$sourceCommand" ]; then
    echo 'ERROR: No -s|--source-command SOURCE-COMMANDLINE specified.'
    echo
    printUsage "$0"
    exit 2
fi >&2

eval "$sourceCommand &" || exit 126
pid=$!

if [ ${#commands[@]} -eq 0 ]; then
    literalPidMarker="$(printf %s "$pidMarker" | sed -e 's/[][\$*.^#]/\\&/g')"
    sed --unbuffered -e "s#${literalPidMarker}#${pid}#g" \
	| if [ "$isBare" ]; then
	    bash -
	else
	    runWithPrompt "${runWithPromptArgs[@]}"
	fi
else
    typeset -a p=("$pid")
    [ "$isNeedEval" ] && printf -v pid '%q' "$pid"
    typeset -a interpolatedCommands=("${commands[@]//"$pidMarker"/$pid}")
    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] || p=()
    if [ "$isNeedEval" ]; then
	eval "${interpolatedCommands[@]}" '"${p[@]}"'
    else
	"${interpolatedCommands[@]}" "${p[@]}"
    fi
fi
