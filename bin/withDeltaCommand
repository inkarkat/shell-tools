#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${WITHDELTACOMMAND_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "-d|--delta-command DELTA-COMMANDLINE | -D|--delta-exec SIMPLE-DELTA-COMMAND [...] $WITHDELTACOMMAND_EXEC_END [...] -c|--command \"COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] ${WITHDELTACOMMAND_EXEC_END} [--exec ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]"
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)]"
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND surrounded by two invocations of DELTA-COMMAND.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    -d|--delta-command DELTA-COMMAND
			Execute DELTA-COMMAND before and after COMMAND.
    -D|--delta-exec DELTA-COMMAND [...] $WITHDELTACOMMAND_EXEC_END
			Execute DELTA-COMMAND before and after COMMAND; all
			following arguments are taken to be arguments to the
			DELTA-COMMAND until an argument consisting of '${WITHDELTACOMMAND_EXEC_END}' is
			encountered.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such.
    --exec CMD [...] ${WITHDELTACOMMAND_EXEC_END}	Execute CMD; all following arguments are taken to be
			arguments to the CMD until an argument consisting of
			'${WITHDELTACOMMAND_EXEC_END}' is encountered.
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT

EXIT STATUS:
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    *   any exit status from COMMAND(s); the exit status from DELTA-COMMAND is
	lost
HELPTEXT
}

isBare=
deltaCommands=
commands=
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--delta-command|-d)
			shift; deltaCommands+="${deltaCommands:+ ; }$1"; shift;;
	--delta-exec|-D)
			shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$WITHDELTACOMMAND_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: -D|--delta-exec command must be concluded with '${WITHDELTACOMMAND_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			deltaCommands+="${deltaCommands:+ ; }${cmd}"
			;;
	--command|-c)	shift; commands+="${commands:+ ; }$1"; shift;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$WITHDELTACOMMAND_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${WITHDELTACOMMAND_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ ; }${cmd}"
			;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+="${commands:+ ; }${quotedSimpleCommand% }"
fi
if [ -z "$deltaCommands" ]; then
    echo "ERROR: No DELTA-COMMAND(s) specified; need to pass -d|--delta-command \"COMMANDLINE\", or -D|--delta-exec SIMPLE-DELTA-COMMAND [...] $WITHDELTACOMMAND_EXEC_END"
    echo
    printUsage "$0"
    exit 2
fi >&2

execute()
{
    if [ -z "$commands" ]; then
	if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	    bash "${bashArgs[@]}" -
	else
	    ${runWithCommand:?} "${runWithPromptArgs[@]}"
	fi
    else
	eval "$commands"
    fi
}

executeDelta()
{
    eval "$deltaCommands"
}

executeDelta
trap 'executeDelta' EXIT
execute
