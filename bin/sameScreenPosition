#!/bin/bash

: ${SAMESCREENPOSITION_COMMAND_JOINER=;}
: ${RESTORE_CURSOR_POSITION=[u}
: ${SAVE_CURSOR_POSITION=[s}
: ${ERASE_TO_END=[0J}
: ${CURSOR_UP=[1A}

printUsage()
{
    cat <<HELPTEXT
Clear the remainder of the screen, execute COMMAND and return the cursor to the
original position, so that a subsequent invocation will overwrite the COMMAND's
output (as long as no scrolling happens). If you don't use --last for the final
invocation, the last COMMAND's output will be overwritten by a shell prompt.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '--last -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    cat <<HELPTEXT
Execute COMMAND and on --subsequent invocations return the cursor to the
original position and clear to the end, so that these overwrite the COMMAND's
output (as long as no scrolling happens - by default, output is supposed to be a
single line; you can reserve more characters via -l|--max-length or lines via
-L|--reserve-lines).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--first [-l|--max-length COLS|-L|--reserve-lines LINENUM] [-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '--subsequent -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}

before="${SAVE_CURSOR_POSITION}${ERASE_TO_END}"
after="$RESTORE_CURSOR_POSITION"
isFirst=
maxLength=
reserveLines=1
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--first)	shift; isFirst=t; after='';;
	--subsequent)	shift; before="${RESTORE_CURSOR_POSITION}${ERASE_TO_END}"; after='';;
	--last)		shift; after='';;
	--max-length|-l)
			shift; maxLength="$1"; shift;;
	--reserve-lines|-L)
			shift; reserveLines="$1"; shift;;
	--command|-c)	shift; commands+="${commands:+ $SAMESCREENPOSITION_COMMAND_JOINER }$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+="${commands:+ $SAMESCREENPOSITION_COMMAND_JOINER }${quotedSimpleCommand% }"
fi
if [ -z "$commands" ] && [ ! "$isFirst" ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
fi >&2

if [ "$isFirst" ]; then
    if [ -n "$maxLength" ]; then
	if [ $maxLength -gt 0 ]; then
	    printf -v spaceOut "%${maxLength}s" ' '
	    before="${spaceOut}${spaceOut// /}${before}"
	fi
    elif [ ${reserveLines:-0} -gt 0 ]; then
	printf -v spaceOut "%${reserveLines}s" ' '
	before="${spaceOut// /$'\n'}${CURSOR_UP/1/$reserveLines}${before}"
    fi
fi

[ -z "$before" ] || printf >/dev/tty %s "$before"
[ -z "$after" ] || trap 'printf >/dev/tty %s "$after"' INT QUIT EXIT

eval "$commands"
