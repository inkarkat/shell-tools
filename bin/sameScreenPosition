#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Clear the remainder of the screen, execute COMMAND and return the cursor to the
original position, so that a subsequent invocation will overwrite the COMMAND's
output (as long as no scrolling happens).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}

isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("$@")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
fi >&2

: ${RESTORE_CURSOR_POSITION=[u}
: ${SAVE_CURSOR_POSITION=[s}
: ${ERASE_TO_END=[0J}

printf >/dev/tty %s "${SAVE_CURSOR_POSITION}${ERASE_TO_END}"
trap 'printf >/dev/tty %s "$RESTORE_CURSOR_POSITION"' INT QUIT EXIT

if [ "$isNeedEval" ]; then
    eval "${commands[@]}"
else
    "${commands[@]}"
fi
