#!/bin/bash
set -o pipefail

: ${EACHARG_COMMAND_JOINER=;}
: ${EACHARG_EXEC_END=;}
: ${EACHARG_ARGUMENTS_END=;}
: ${EACHARG_ARG_WHAT=arg}
: ${EACHARG_ARG_MARKER='{}'}
argMarker="$EACHARG_ARG_MARKER"; unset EACHARG_ARG_MARKER
printf -v escapedArgMarker %q "$argMarker"

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q%s %s\n' "$(basename "$1")" "${hasProgressNotification:+ [--progress SINK]}" "[--with-header [--separate-errors] [--color=(always|auto|never)|--no-color]|--with-prompt $(runWithPrompt --get-short-usage 2>/dev/null)] [--between-command BETWEEN-COMMAND] [--usage-redirect COMMAND] -c|--command \"COMMANDLINE\" [...] --exec SIMPLECOMMAND [...] ${EACHARG_EXEC_END} [--exec ...] | ([--] SIMPLECOMMAND [...] --) ARGUMENT [...] [-?|-h|--help]"
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] --arguments ARG [...] ${EACHARG_ARGUMENTS_END} -c|--command \"COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] ${EACHFILE_EXEC_END} [--exec ...] [--] SIMPLECOMMAND [...]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND with each supplied ARGUMENT (which ${argMarker:+either }is appended to${argMarker:+ or
replaces any $argMarker marker inside} COMMANDLINE) individually. So one invocation of
COMMAND per ARGUMENT.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
${hasProgressNotification:+    --progress SINK Report the current ARGUMENT through one of the SINKs of the
		    progressNotification command.
}    --with-header	Print a header (containing the current ARGUMENT) before
			each execution if COMMAND produces output.
    --separate-errors	Do not combine command output and command errors into
			one (paged) stream. Commands that just cause error
			output won't have a header then. Error output will
			remain on its separate file descriptor and will not be
			paged. Useful if you want to suppress errors or handle
			them separately.
    --with-prompt	Emulate a full prompt (as if invoking COMMAND) before
			each execution.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT
    --between-command BETWEEN-COMMAND
			Execute BETWEEN-COMMAND in between each COMMAND
			execution. The last COMMAND's exit status is in \$?.
    --exec CMD [...] ${EACHARG_EXEC_END}	Execute CMD; all following arguments are taken to be
			arguments to the CMD until an argument consisting of
			'${EACHARG_EXEC_END}' is encountered.
    --arguments ARG [...] ${EACHARG_ARGUMENTS_END}
			Take the following ARG(s); i.e. all following arguments
			until an argument consisting of '${EACHARG_ARGUMENTS_END}' is encountered.
    --usage-redirect COMMAND
			When no ARGUMENT(s) are passed, redirect to
			COMMAND --help for usage instructions instead of
			printing this command's usage. Useful for wrapper
			scripts to delegate back to themselves.
EXIT STATUS:
Overall exit status is the highest status of all. If you specify any
runWith[Prompt] argument, --worst-status needs to be explicitly passed.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" 'ping -c1 -q -- google.com yahoo.com bing.com'
}

progressSink=
typeset -a arguments=()
with=
errorRedir='2>&1'
typeset -a colorArg=()
commands=
betweenCommand=
usageRedirectCommand=
typeset -a runWithPromptArgs=()
parseTail()
{
    if [ -z "$commands" -o ${#arguments[@]} -gt 0 ]; then
	local cmd=
	while [ $# -gt 0 ] && [ ${#arguments[@]} -gt 0 -o "$1" != -- ]
	do
	    # Need to quote SIMPLECOMMAND to undo the effects of eval.
	    printf -v quotedArg '%q' "$1"
	    cmd="${cmd}${cmd:+ }${quotedArg//"$escapedArgMarker"/$argMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
	    shift
	done
	commands+="${commands:+ $EACHARG_COMMAND_JOINER }${cmd}"
	[ "$1" = -- ] && shift
    fi

    arguments+=("$@"); set --
}
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--arguments)	shift
			while [ $# -gt 0 -a "$1" != "$EACHARG_ARGUMENTS_END" ]
			do
			    arguments+=("$1")
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --arguments must be concluded with '${EACHARG_ARGUMENTS_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			if [ ${#arguments[@]} -eq 0 ]; then
			    echo 'ERROR: --arguments must be followed by at least one ARGUMENT.'; echo; printUsage "$0"
			    exit 2
			fi >&2
			;;
	--command|-c)	shift; commands+="${commands:+ $EACHARG_COMMAND_JOINER }$1"; shift;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$EACHARG_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg//"$escapedArgMarker"/$argMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${EACHARG_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ $EACHARG_COMMAND_JOINER }${cmd}"
			;;
	--progress)	shift; progressSink="$1"; shift;;
	--with-header)	shift; with=header;;
	--separate-errors)
			shift; errorRedir='';;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--with-prompt)	shift; with=runWithPrompt;;

	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--exit-on-failure|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift; : ${with:=runWith};;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift; : ${with:=runWith};;

	--between-command)
			shift; betweenCommand="$1"; shift;;
	--usage-redirect)
			shift; usageRedirectCommand="$1"; shift;;
	--)		shift; parseTail "$@"; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		parseTail "$@"; break;;
    esac
done
if [ -z "$commands" ]; then
    echo "ERROR: No COMMAND(s) specified; need to pass -c|--command \"COMMANDLINE\", or --exec SIMPLECOMMAND [...] $EACHARG_EXEC_END or SIMPLECOMMAND."
    echo
    printUsage "$0"
    exit 2
elif [ ${#runWithPromptArgs[@]} -gt 0 -a "$with" = 'header' ]; then
    echo 'ERROR: Cannot combine runWith[Prompt] arguments with --with-header.'
    echo
    printUsage "$0"
    exit 2
fi >&2
if [ ${#arguments[@]} -eq 0 ]; then
    echo >&2 'ERROR: No ARGUMENT(s) passed.'
    echo >&2
    if [ "$usageRedirectCommand" ]; then
	"$usageRedirectCommand" --help
    else
	printUsage "$0" >&2
    fi
    exit 2
fi

if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
    typeset -a progressNotificationCommand=(progressNotification --to "$progressSink" ${EACHARG_ARG_WHAT:+--prepend-count "$EACHARG_ARG_WHAT"} --count-to $#)
fi

setStatus()
{
    return ${1:-0}
}

isFirst=t
isHeader=
case "$with" in
    runWith*)
	[ ${#runWithPromptArgs[@]} -eq 0 ] && runWithPromptArgs=(--worst-status)
	{
	    printf ' exec 4> >('
	    printf '%q ' "${progressNotificationCommand[@]}"
	    printf '2>/dev/null); reportProgress() { trap "reportProgress() { :; }; trap PIPE" PIPE; printf %%s\\\\n "$*" >&4 2>/dev/null; }\n'

	    for arg in "${arguments[@]}"
	    do
		if [ ! "$isFirst" ] && [ -n "$betweenCommand" ]; then
		    if [ "${betweenCommand:$((${#betweenCommand} - 1))}" = ';' ]; then
			printf '%s ' "$betweenCommand"  # Prepend the BETWEEN-COMMAND to the next ARGUMENT's execution (so there's no separate prompt) if it ends with a semicolon. Its exit status is then ignored.
		    else
			printf '%s\n' "$betweenCommand" # Use a separate prompt (and with it consider its exit status).
		    fi
		fi

		printf -v quotedArg '%q' "$arg"
		interpolatedCommands="${commands//"$argMarker"/$quotedArg}"
		typeset -a a=("$quotedArg")
		[ "$interpolatedCommands" = "$commands" ] || a=()

		printf ' reportProgress %q || :\n' "$arg"
		printf '%s ' "$interpolatedCommands" "${a[@]}"
		printf '\n'
		isFirst=
	    done
	} | ${with:?} "${runWithPromptArgs[@]}"
	;;
    header)
	isHeader=t;&
    '')
	if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
	    exec 4> >("${progressNotificationCommand[@]}" 2>/dev/null)
	    reportProgress()
	    {
		trap 'reportProgress() { :; }; trap PIPE' PIPE
		printf '%s\n' "$*" >&4 2>/dev/null  # Silence "printf: write error: Broken pipe"
	    }
	else
	    reportProgress() { :; }
	fi

	status=0
	: ${EACHARG_HEADER_ID:="eachArg-$$-$RANDOM"}
	exec 3<&0
	for arg in "${arguments[@]}"
	do
	    if [ ! "$isFirst" ] && [ -n "$betweenCommand" ]; then
		setStatus $exitStatus; eval "$betweenCommand" || { exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	    fi

	    printf -v quotedArg '%q' "$arg"
	    interpolatedCommands="${commands//"$argMarker"/$quotedArg}"
	    [ "$interpolatedCommands" = "$commands" ] || quotedArg=''

	    reportProgress "$arg"
	    (eval "${isHeader:+{}" "$interpolatedCommands" "$quotedArg" "${isHeader:+; \} $errorRedir | withHeader "${colorArg[@]}" --id '$EACHARG_HEADER_ID' -- '$arg'}") <&3 || \
		{ exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	    isFirst=
	done
	exit $status
	;;
    *)	printf >&2 'ASSERT: Invalid strategy: %s\n' "$with"; exit 3;;
esac
