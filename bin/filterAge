#!/bin/bash
shopt -qs extglob

DATE=dateex; type -t "$DATE" >/dev/null || DATE=date	# Use extended date parsing via dateex if available.

printUsage()
{
    cat <<HELPDESCRIPTION
Only print lines where the date (Unix epoch) in the first column is greater /
smaller than AGE / DATE.
SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours, 'd'
for days, 'w' for weeks, 'mo' for months, 'y' for years, 'g' for generations.
HELPDESCRIPTION
    echo
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-F|--field-separator FS] [-k|--keep-date] -n|--newer|-o|--older|-lt|-le|-eq|-ne|-ge|-gt AGE[SUFFIX]|DATE'
    cat <<HELPTEXT
    --field-separator|-F FS
			Use FS for splitting the data into columns (instead of
			the default whitespace). Unlike AWK, does not support a
			regular expression.
    --keep-date|-k	Keep the age column. By default, the column is dropped.
EXIT STATUS:
    0	At least one date passed the comparison.
    1	No date passed the comparison.
    2	Bad invocation, wrong or missing command-line arguments.
    4	Some line(s) did not contain a valid date.
HELPTEXT
}

now="$(date +%s)"
adjustment=
timeToEpoch()
{
    if [ -n "$referenceEpoch" ]; then
	echo 'ERROR: Only one AGE[SUFFIX]|DATE allowed.'
	echo
	printUsage "$0"
	exit 2
    fi >&2

    case "$1" in
	+([0-9])?(s))   referenceEpoch=$((now - ${1%s}));;
	+([0-9])m)	referenceEpoch=$((now - ${1%m} * 60));;
	+([0-9])h)	referenceEpoch=$((now - ${1%h} * 3600));;
	+([0-9])d)	referenceEpoch=$((now - ${1%d} * 86400));;
	+([0-9])w)	referenceEpoch=$((now - ${1%w} * 86400 * 7));;
	+([0-9])mo)	referenceEpoch=$((now - ${1%mo} * 86400 * 30));;
	+([0-9])y)	referenceEpoch=$((now - ${1%y} * 86400 * 365));;
	+([0-9])g)	referenceEpoch=$((now - ${1%g} * 86400 * 9131));;
	*)		referenceEpoch=$("$DATE" --date="$1" +%s) || exit 2
			adjustment=0	# Don't adjust an absolute date; only relative ages should be time-adjusted.
			;;
    esac
}

isKeepDate=
compareOp=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--field-separator|-F)
			shift; IFS="$1"; shift;;
	--keep-date|-k)	shift; isKeepDate=t;;
	--newer|-n)	shift; timeToEpoch "$1"; shift; compareOp=-lt;;
	--older|-o)	shift; timeToEpoch "$1"; shift; compareOp=-gt;;
	-lt|-le|-eq|-ne|-ge|-gt)
			compareOp="$1"; shift; timeToEpoch "$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 -o -z "$compareOp" ]; then
    printUsage "$0" >&2
    exit 2
fi

status=
SECONDS=0
isEOL=t
while read -r dateField remainder || { isEOL=; [ -n "$line" ]; }
do
    if [[ "$dateField" =~ ^@?([0-9]+)$ ]]; then
	epoch="${BASH_REMATCH[1]}"
    else
	printf >&2 "ERROR: Not a date: '%s'.\\n" "$dateField"
	status=4
	continue
    fi

    [ $((referenceEpoch + ${adjustment:-SECONDS})) $compareOp $epoch ] || continue
    printf "%s${isEOL:+\\n}" "${isKeepDate:+${dateField}${IFS:0:1}}$remainder"
    : ${status:=0}
done
exit ${status:-1}
