#!/bin/bash

: ${WITHTEMPFILE_FILE_MARKER='{}'}
fileMarker="$WITHTEMPFILE_FILE_MARKER"; unset WITHTEMPFILE_FILE_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-p|--tmpdir DIRSPEC] [-n|--name NAME] [--move|-m|--move-on-success|-M|--move-on-failure|--rename|-r|--rename-on-success|-R|--rename-on-failure] [--keep|-k|--keep-on-success|-K|--keep-on-failure] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)]"
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND with a tempfile argument (which ${fileMarker:+either }is appended${fileMarker:+ or replaces
any $fileMarker marker }inside COMMANDLINE).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --tmpdir|-p DIRSPEC	Create the tempfile inside DIRSPEC instead of the
			default temp directory.
    --name|-n NAME	Use NAME as the tempfile prefix.
    --move FILESPEC	Move the tempfile after COMMAND(s) have executed.
    --move-on-success|-m FILESPEC
			Move the tempfile to FILESPEC if COMMAND(s) succeed.
    --move-on-failure|-M FILESPEC
			Move the tempfile to FILESPEC if COMMAND(s) failed.
    --rename FILENAME	Rename the tempfile inside the temp dir after COMMAND(s)
			have executed.
    --rename-on-success|-r FILENAME
			Rename the tempfile to FILENAME inside the temp dir if
			COMMAND(s) succeed.
    --rename-on-failure|-R FILENAME
			Rename the tempfile to FILENAME inside the temp dir if
			COMMAND(s) failed.
    --keep		Do not clean up the tempfile. --move and --rename have
			precedence over --keep, but if both are given, the
			tempfile will be kept should the move fail.
    --keep-on-success|-k
			Do not clean up the tempfile if COMMAND(s) succeed.
    --keep-on-failure|-K
			Do not clean up the tempfile if COMMAND(s) fail.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such.
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT

EXIT STATUS:
    0	Complete success.
    *   any exit status from COMMAND(s)
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    124	Failed to clean up / move / rename tempfile.
    125	Failed to create tempfile.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "-m desktop.tar -- tar cvf ${fileMarker:-'{}'} ~/Desktop"
}
assertSingleTargetFilespec()
{
    if [ -n "$targetFilespec" ]; then
	echo 'ERROR: Can only pass one --move[-*] or --rename[-*].'
	echo
	printUsage "$1"
	exit 2
    fi >&2
}

isDirectory=
tempDirspec=
prefix="$(basename -- "$0")"
isMove=
renameOp=
targetFilespec=
keepOp=
isBare=
typeset -a commands=()
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--directory)	shift; isDirectory=t;;	# Note: Internal flag for withTempdir, not exposed here.

	--tmpdir|-p)	shift; tempDirspec="${1:?}"; shift;;
	--name|-n)	shift; prefix="${1:?}"; shift;;
	--move)		shift; isMove=t; renameOp=-ge; assertSingleTargetFilespec "$0"; targetFilespec="${1:?}"; shift;;
	--move-on-success|-m)
			shift; isMove=t; renameOp=-eq; assertSingleTargetFilespec "$0"; targetFilespec="${1:?}"; shift;;
	--move-on-failure|-M)
			shift; isMove=t; renameOp=-ne; assertSingleTargetFilespec "$0"; targetFilespec="${1:?}"; shift;;
	--rename)	shift; renameOp=-ge; assertSingleTargetFilespec "$0"; targetFilespec="${1:?}"; shift;;
	--rename-on-success|-r)
			shift; renameOp=-eq; assertSingleTargetFilespec "$0"; targetFilespec="${1:?}"; shift;;
	--rename-on-failure|-R)
			shift; renameOp=-ne; assertSingleTargetFilespec "$0"; targetFilespec="${1:?}"; shift;;
	--keep)		shift; keepOp=-ge;;
	--keep-on-success|-k)
			shift; keepOp=-eq;;
	--keep-on-failure|-K)
			shift; keepOp=-ne;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); shift;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    printf -v escapedFileMarker %q "$fileMarker"
    commands+=(${commands:+;} "${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
fi

getOctalFilePermissions()
{
    # Note: No --dereference necessary because the created temp file will be a
    # real file.
    stat --format %#a -- "$@" 2>/dev/null
}

if [ "$isDirectory" ]; then
    tempFilespec="$(mktemp --directory --tmpdir${tempDirspec:+="$tempDirspec"} "${prefix}-XXXXXX" 2>/dev/null || { dirspec="${tempDirspec:-${TMPDIR:-/tmp}}/${prefix}.$$$RANDOM"; mkdir --parents -- "$dirspec" && printf %s "$dirspec"; })" \
	&& [ -d "$tempFilespec" ]
else
    tempFilespec="$(mktemp ${tempDirspec:+--tmpdir="$tempDirspec"} "${prefix}-XXXXXX" 2>/dev/null || { tempfile="${tempDirspec:-${TMPDIR:-/tmp}}/${prefix}.$$$RANDOM"; touch -- "$tempfile" && printf %s "$tempfile"; })" \
	&& [ -f "$tempFilespec" ]
fi || exit 125
unset tempFilePermissions; [ -n "$renameOp" ] && [ -n "$tempDirspec" ] && tempFilePermissions="$(getOctalFilePermissions "$tempFilespec")"
[ -z "$targetFilespec" ] || [ "$isMove" ] || targetFilespec="$(dirname -- "$tempFilespec")/${targetFilespec}"

status=255
finally()
{
    local originalStatus=$status
    if [ -n "$renameOp" ] && [ $originalStatus $renameOp 0 ]; then
	if [ -n "$tempDirspec" ]; then
	    # mktemp uses limited u+rw permissions, but when moving we want the
	    # default umask to apply (unless COMMAND(s) have already changed
	    # them).
	    if [ "${tempFilePermissions?}" = "$(getOctalFilePermissions "$tempFilespec")" ]; then
		defaultPermissions="$(printf '%o\n' "$((0666 & ~0$(umask)))")"
		[ -n "$defaultPermissions" ] && chmod "$defaultPermissions" -- "$tempFilespec" 2>/dev/null
	    fi
	fi

	mv --force -- "$tempFilespec" "$targetFilespec" && exit $status || status=124
    fi
    if [ -z "$keepOp" ] || ! [ $originalStatus $keepOp 0 ]; then
	rm --force ${isDirectory:+--recursive} -- "$tempFilespec" || exit 124
    fi

    exit $status
}
trap 'finally' EXIT

if [ ${#commands[@]} -eq 0 ]; then
    literalFileMarker="$(printf %s "$fileMarker" | sed -e 's/[][\$*.^#]/\\&/g')"
    literalTempFilespec="$tempFilespec"
    literalTempFilespec="${literalTempFilespec//\\/\\\\}"
    literalTempFilespec="${literalTempFilespec//&/\\&}"

    sed --unbuffered -e "s#${literalFileMarker}#${literalTempFilespec//#/\\#}#g" \
	| if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	    bash "${bashArgs[@]}" -
	else
	    ${runWithCommand:?} "${runWithPromptArgs[@]}"
	fi
else
    typeset -a f=("$tempFilespec")
    printf -v tempFilespec '%q' "$tempFilespec"
    typeset -a interpolatedCommands=("${commands[@]//"$fileMarker"/$tempFilespec}")
    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] || f=()

    eval "${interpolatedCommands[@]}" '"${f[@]}"'
fi; status=$?
