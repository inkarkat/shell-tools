#!/bin/bash

: ${COMMANDLINETOSHELLCOMMAND_COMMAND_MARKER='{}'}
commandMarker="$COMMANDLINETOSHELLCOMMAND_COMMAND_MARKER"; unset COMMANDLINETOSHELLCOMMAND_COMMAND_MARKER
: ${COMMANDLINETOSHELLCOMMAND_TARGETARG_MARKER='{T}'}
targetArgMarker="$COMMANDLINETOSHELLCOMMAND_TARGETARG_MARKER"; unset COMMANDLINETOSHELLCOMMAND_TARGETARG_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-t|--target-command TARGET-COMMANDLINE -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-t|--target-command TARGET-COMMANDLINE -T|--target-arguments [-F|--forward-foreign] -c|--command "COMMANDLINE" [-c ...] [--] [TARGET-ARGUMENTS ...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "-t|--target-command TARGET-COMMANDLINE -A|--arguments [-F|--forward-foreign] -c|--command 'COMMANDLINE \"\$1\" \"\$2\"' [-c ...] [--] [COMMAND-ARGUMENTS ...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Take COMMAND, wrap in in a single shell invocation, and feed this to
TARGET-COMMAND (that just takes a single command but does not interpret an
entire command-line) ${commandMarker:+either }appended to${commandMarker:+ or replacing any $commandMarker marker inside}
TARGET-COMMAND.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --target-command|-t TARGET-COMMANDLINE
			Execute TARGET-COMMAND as a command-line. The
			shell invocation that executes the passed COMMANDLINE(s)
			will ${commandMarker:+either }be appended${commandMarker:+ or replace any $commandMarker marker inside
			TARGET-COMMANDLINE}.
    --target-arguments|-T
			Take additional TARGET-ARGUMENTS and ${targetArgMarker:+either }append
			(after the shell invocation)${targetArgMarker:+ or replace any $targetArgMarker marker
			inside TARGET-COMMANDLINE}.
    --arguments|-A	Take additional COMMAND-ARGUMENTS and pass them to the
			shell invocation as command-line arguments (i.e.
			addressable as "\$1", "\$2", etc.)
    --forward-foreign|-F
			Forward any command-line option and argument that is not
			recognized to TARGET-/COMMAND-ARGUMENTS instead of
			complaining. Useful in aliases to seamlessly forward
			everything.
    --command|-c CMD	The cmdline(s) fed to TARGET-COMMAND.
HELPTEXT
}

isForward=
typeset -a forwardedArguments=()
isTargetArguments=
isCommandArguments=
targetCommand=
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--target-command|-t)
			shift; targetCommand="$1"; shift;;
	--target-arguments|-T)
			shift; isTargetArguments=t;;
	--arguments|-A) shift; isCommandArguments=t;;
	--forward-foreign|-F)
			shift; isForward=t;;
	--command|-c)	shift; commands="${commands}${commands:+; }$1"; shift;;
	--)		shift; break;;
	-*)		if [ "$isForward" ]; then
			    forwardedArguments+=("$1"); shift
			else
			    echo "ERROR: Unknown option \"$1\"!"
			    echo
			    printUsage "$0"
			    exit 2
			fi >&2
			;;
	*)		if [ "$isForward" ]; then
			    forwardedArguments+=("$1"); shift
			else
			    break
			fi
			;;
    esac
done
if [ $# -ne 0 ] && [ ! "$isTargetArguments" ] && [ ! "$isCommandArguments" ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to undo
    # the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands="${commands}${commands:+; }${quotedSimpleCommand% }"
fi
if [ -z "$targetCommand" ]; then
    echo 'ERROR: No -t|--target-command TARGET-COMMANDLINE specified.'
    echo
    printUsage "$0"
    exit 2
elif [ -z "$commands" ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
elif [ "$isTargetArguments" ] && [ "$isCommandArguments" ]; then
    echo 'ERROR: Cannot combine -T|--target-arguments with -A|--arguments.'
    echo
    printUsage "$0"
    exit 2
elif [ "$isForward" ] && [ ! "$isTargetArguments" ] && [ ! "$isCommandArguments" ]; then
    echo 'ERROR: -F|--forward-foreign must be combined with -T|--target-arguments or -A|--arguments.'
    echo
    printUsage "$0"
    exit 2
fi >&2

typeset -a shellCommand=("${SHELL:-sh}" -c "$commands")

if [ $# -ne 0 ] && [ "$isCommandArguments" ]; then
    shellCommand+=("${SHELL:-sh}" "${forwardedArguments[@]}" "$@")	 # $0 is the shell itself.
fi

printf -v quotedShellCommand '%q ' "${shellCommand[@]}"; quotedShellCommand="${quotedShellCommand% }"
typeset -a s=("${shellCommand[@]}")
interpolatedTargetCommand="${targetCommand//"$commandMarker"/$quotedShellCommand}"
[ "$interpolatedTargetCommand" = "$targetCommand" ] || s=()

typeset -a t=()
if [ ${#forwardedArguments[@]} -gt 0 -o $# -gt 0 ] && [ "$isTargetArguments" ]; then
    printf -v quotedArguments '%q ' "${forwardedArguments[@]}" "$@"; quotedArguments="${quotedArguments% }"
    t=("${forwardedArguments[@]}" "$@")
    originalTargetCommand="$interpolatedTargetCommand"
    interpolatedTargetCommand="${originalTargetCommand//"$targetArgMarker"/$quotedArguments}"
    [ "$interpolatedTargetCommand" = "$originalTargetCommand" ] || t=()
fi

eval "$interpolatedTargetCommand" '"${s[@]}" "${t[@]}"'
