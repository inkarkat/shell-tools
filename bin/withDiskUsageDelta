#!/bin/bash

: ${WITHDISKUSAGEDELTA_EXEC_END=;}
: ${WITHDISKUSAGEDELTA_COMMAND_JOINER=;}
: ${WITHDISKUSAGEDELTA_WHAT:=Disk usage}
: ${WITHDISKUSAGEDELTA_OUTPUT_END_PREFIX=}
: ${WITHDISKUSAGEDELTA_OUTPUT_END_SUFFIX=}
: ${WITHDISKUSAGEDELTA_OUTPUT_END_SEPARATOR= â†’ }

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-a|--include-absolute] [--for FILESPEC [--for ...]] -c|--command \"COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] ${WITHDISKUSAGEDELTA_EXEC_END} [--exec ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]"
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" "[...] [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)]"
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND and print the disk usage delta (for the current working
directory / passed FILESPEC(s)) afterwards.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --include-absolute|-a
			Include the absolute disk usages before and after.
    --for FILESPEC	Consider the disk usage of FILESPEC.
    --command|-c CMD	The command line to be executed. When this is a simple
			command, it can also be passed as such.
    --exec CMD [...] ${WITHDISKUSAGEDELTA_EXEC_END}	Execute CMD; all following arguments are taken to be
			arguments to the CMD until an argument consisting of
			'${WITHDISKUSAGEDELTA_EXEC_END}' is encountered.
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT

EXIT STATUS:
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    *   any exit status from COMMAND(s)
HELPTEXT
}

formatSize()
{
    numfmt --to iec-i "${1:?}"
}

isIncludeAbsolute=
typeset -a filespecs=()
typeset -a withDeltaCommandArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--include-absolute|-a)
			shift; isIncludeAbsolute=t;;
	--for)		shift; filespecs+=("${1:?}"); shift;;
	--calculate-delta)
			shift
			[ $# -eq 2 ] || { printf >&2 'ASSERT: Expected 2 arguments, got %d\n' $#; exit 3; }
			if [ $1 -eq $2 ]; then
			    [ "$isIncludeAbsolute" ] \
				&& printf '%s did not change: %s\n' "$WITHDISKUSAGEDELTA_WHAT" "$(formatSize $1)" \
				|| printf '%s did not change.\n' "$WITHDISKUSAGEDELTA_WHAT"
			    exit 0
			elif [ $1 -lt $2 ]; then
			    trend='increased'
			    delta=$(($2 - $1))
			else
			    trend='decreased'
			    delta=$(($1 - $2))
			fi

			[ "$isIncludeAbsolute" ] \
			    && printf -v diff '%s%s%s%s%s' "$WITHDISKUSAGEDELTA_OUTPUT_END_PREFIX" "$(formatSize $1)" "$WITHDISKUSAGEDELTA_OUTPUT_END_SEPARATOR" "$(formatSize $2)" "$WITHDISKUSAGEDELTA_OUTPUT_END_SUFFIX" \
			    || diff=''

			printf '%s %s by %s (%s%%)%s\n' "$WITHDISKUSAGEDELTA_WHAT" "$trend" "$(formatSize $delta)" "$(divround $((10000 * delta / $1)) 2)" "${diff:+: }${diff:-.}"
			exit 0
			;;
	--)		withDeltaCommandArgs+=("$1"); shift; break;;
	*)		withDeltaCommandArgs+=("$1"); shift;;
    esac
done

quotedFilespecs=; [ ${#filespecs[@]} -eq 0 ] || printf -v quotedFilespecs ' %q' "${filespecs[@]}"
WITHDELTACOMMAND_EXEC_END="$WITHDISKUSAGEDELTA_EXEC_END" \
WITHDELTACOMMAND_COMMAND_JOINER="$WITHDISKUSAGEDELTA_COMMAND_JOINER" \
	exec withDeltaCommand \
		--delta-command 'du --bytes --summarize --total --${quotedFilespecs} 2>/dev/null | tail -n 1 | field 1' \
		--sink-exec "${BASH_SOURCE[0]}" ${isIncludeAbsolute:+--include-absolute} --calculate-delta \; \
		"${withDeltaCommandArgs[@]}" "$@"
