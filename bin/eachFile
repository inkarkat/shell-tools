#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${EACHFILE_EXEC_END=;}
: ${EACHFILE_FILE_WHAT=file}
: ${EACHFILE_FILE_MARKER='{}'}
fileMarker="$EACHFILE_FILE_MARKER"; unset EACHFILE_FILE_MARKER

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s%s %s\n' "$(basename "$1")" '[-l|--local-dir]' "${hasProgressNotification:+ [--progress SINK]}" "[--with-[basename-]header [--separate-errors] [--color=(always|auto|never)|--no-color]|--with-prompt $(runWithPrompt --get-short-usage 2>/dev/null)] [--between-command BETWEEN-COMMAND] [--usage-redirect COMMAND] -c|--command \"COMMANDLINE\" [-c ...] --exec SIMPLECOMMAND [...] ${EACHFILE_EXEC_END} [--exec ...] | SIMPLECOMMAND [...] [--] FILE [...] [-?|-h|--help]"
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] -c|--command \"COMMANDLINE\" [-c ...] --exec SIMPLECOMMAND [...] ${EACHFILE_EXEC_END} [--exec ...] | SIMPLECOMMAND [...] -f|--find FIND-ARGS ..."
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND on each FILE (which ${fileMarker:+either }is appended${fileMarker:+ or replaces any $fileMarker marker}
inside COMMANDLINE) individually. So one invocation of COMMAND per FILE.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --local-dir|-l	Change the directory to the one containing the current
			FILE before executing COMMAND, and only pass the filename
			itself.${hasProgressNotification:+
    --progress SINK	Report the current FILE through one of the SINKs of the
			progressNotification command.}
    --with-header	Print a header (containing the current FILE) before each
			execution.
    --with-basename-header
			Print a header (containing just the current FILE's name
			without any path) before each execution.
    --separate-errors	Do not combine command output and command errors into
			one (paged) stream. Commands that just cause error
			output won't have a header then. Error output will
			remain on its separate file descriptor and will not be
			paged. Useful if you want to suppress errors or handle
			them separately.
    --with-prompt	Emulate a full prompt (as if invoking COMMAND) before
			each execution.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT
    --between-command BETWEEN-COMMAND
			Execute BETWEEN-COMMAND in between each COMMAND
			execution.
    --exec CMD [...] ${EACHFILE_EXEC_END}	Execute CMD; all following arguments are taken to be
			arguments to the CMD until an argument consisting of
			'${EACHFILE_EXEC_END}' is encountered.
    --find|-f		Execute find with the following FIND-ARGS to obtain the
			list of files instead of directly taking FILEs. This
			allows recursing into and filtering of subdirectories.
			(But you could alternatively directly use
			find -exec {} ; to do the same.)
    --usage-redirect COMMAND
			When no FILE(s) are passed, redirect to COMMAND --help
			for usage instructions instead of printing this
			command's usage. Useful for wrapper scripts to delegate
			back to themselves.
SEE ALSO:
- withFirstExistingFile stops execution after the first FILE that exists.
- processEachFile also passes each FILE individually to COMMAND; instead of the
  header and prompt handling, it checks for changes and COMMAND success and can
  abort and print messages.

EXIT STATUS:
Overall exit status is the highest status of all. If you specify any
runWith[Prompt] argument, --worst-status needs to be explicitly passed.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '--local-dir ping -c1 -q -- /var/htdocs/*.com'
}

isLocalDir=
progressSink=
isFixedNumberOfFiles=t
fileSource='printf %s\n'
fileProcessor=
finder()
{
    find "${findArgs[@]}"
}
makeAbsolute()
{
    # COMMAND may change the directory, so all passed FILE need to be made
    # absolute first.
    while IFS=$'\n' read -r filespec || [ -n "$filespec" ]
    do
	realpath --no-symlinks -- "$filespec"
    done
}
typeset -a findArgs=()
with=
isHeaderBasename=
errorRedir='2>&1'
typeset -a colorArg=()
commands=
betweenCommand=
usageRedirectCommand=
runWithCommand=runWith
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--local-dir|-l)	shift; isLocalDir=t; fileProcessor='makeAbsolute';;
	--find|-f)	shift; findArgs=("$@"); set --; fileSource='finder'; isFixedNumberOfFiles=; break;;
	--exec)		shift
			cmd=
			printf -v escapedFileMarker %q "$fileMarker"
			while [ $# -gt 0 -a "$1" != "$EACHFILE_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg//"$escapedFileMarker"/$fileMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${EACHFILE_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ ; }${cmd}"
			;;
	--command|-c)	shift; commands+="${commands:+ ; }$1"; shift;;
	--progress)	shift; progressSink="$1"; shift;;
	--with-header)	shift; with=header;;
	--with-basename-header)
			shift; with=header; isHeaderBasename=t;;
	--separate-errors)
			shift; errorRedir='';;
	--no-color|--color=*)	colorArg=("$1"); shift;;
	--color)		colorArg=("$1" "$2"); shift; shift;;
	--with-prompt)	shift; with=prompt; runWithCommand=runWithPrompt;;

	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--exit-on-failure|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	--between-command)
			shift; betweenCommand="$1"; shift;;
	--usage-redirect)
			shift; usageRedirectCommand="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		typeset -a files=()
			if ! containsGlob '@(--|--find|-f)' "$@"; then
			    # Consume existing FILEs from behind.
			    while [ $# -gt 0 ]
			    do
				lastArg="${!#}"
				[ -e "$lastArg" ] || break
				files=("$lastArg" "${files[@]}")
				set -- "${@:1:$(($#-1))}"
			    done
			fi

			if [ $# -gt 0 ]; then
			    typeset -a cmd=()
			    while [ $# -gt 0 ] && [[ "$1" != @(--|--find|-f) ]]
			    do
				cmd+=("$1")
				shift
			    done
			    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
			    # undo the effects of eval.
			    printf -v quotedSimpleCommand '%q ' "${cmd[@]}"
			    printf -v escapedFileMarker %q "$fileMarker"
			    commands+="${commands:+ ; }${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
			fi

			if [ ${#files[@]} -gt 0 ]; then
			    set -- "$@" "${files[@]}"
			    break
			fi
			;;
    esac
done
if [ -z "$commands" ]; then
    echo "ERROR: No COMMAND(s) specified; need to pass -c|--command \"COMMANDLINE\", or --exec SIMPLECOMMAND [...] ${EACHFILE_EXEC_END} or SIMPLECOMMAND."
    echo
    printUsage "$0"
    exit 2
elif [ ${#runWithPromptArgs[@]} -gt 0 -a "$with" = header ]; then
    echo 'ERROR: Cannot combine runWith[Prompt] arguments with --with-header.'
    echo
    printUsage "$0"
    exit 2
fi >&2
if [ $# -eq 0 -a ${#findArgs[@]} -eq 0 ]; then
    echo >&2 'ERROR: No FILE(s) passed.'
    echo >&2
    if [ "$usageRedirectCommand" ]; then
	"$usageRedirectCommand" --help
    else
	printUsage "$0" >&2
    fi
    exit 2
fi

if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
    typeset progressCountToArgs=(--count-to $#); [ "$isFixedNumberOfFiles" ] || progressCountToArgs=()
    exec 4> >(progressNotification --to "$progressSink" ${EACHFILE_FILE_WHAT:+--prepend-count "$EACHFILE_FILE_WHAT"} "${progressCountToArgs[@]}" 2>/dev/null)

    reportProgress()
    {
	trap 'reportProgress() { :; }; trap PIPE' PIPE
	printf '%s\n' "$*" >&4 2>/dev/null  # Silence "printf: write error: Broken pipe"
    }
else
    reportProgress() { :; }
fi

isFirst=t
case "$with" in
    prompt)
	[ ${#runWithPromptArgs[@]} -eq 0 ] && runWithPromptArgs=(--worst-status)
	eval '$fileSource "$@"' "${fileProcessor:+|}" "$fileProcessor" | while IFS=$'\n' read -r filespec || [ -n "$filespec" ]
	do
	    if [ ! "$isFirst" ] && [ -n "$betweenCommand" ]; then
		if [ "${betweenCommand:$((${#betweenCommand} - 1))}" = ';' ]; then
		    printf '%s ' "$betweenCommand"  # Prepend the BETWEEN-COMMAND to the next FILE's execution (so there's no separate prompt) if it ends with a semicolon. Its exit status is then ignored.
		else
		    printf '%s\n' "$betweenCommand" # Use a separate prompt (and with it consider its exit status).
		fi
	    fi

	    if [ "$isLocalDir" ]; then
		dirspec="$(dirname -- "$filespec")"
		filespec="$(basename -- "$filespec")"
		printf 'cd %q && ' "$dirspec"   # Previous COMMANDS may have changed the directory, so unconditionally do the chdir.
	    fi

	    printf -v quotedFilespec '%q' "$filespec"
	    interpolatedCommands="${commands//"$fileMarker"/$quotedFilespec}"
	    typeset -a f=("$quotedFilespec")
	    [ "$interpolatedCommands" = "$commands" ] || f=()

	    reportProgress "$filespec"
	    printf '%s ' "$interpolatedCommands" "${f[@]}"
	    printf '\n'
	    isFirst=
	done | ${runWithCommand:?} "${runWithPromptArgs[@]}"
	;;
    *)
	status=0
	: ${EACHFILE_HEADER_ID:="eachFile-$$-$RANDOM"}
	isHeader=; [ "$with" = 'header' ] && isHeader=t
	exec 3<&0
	while IFS=$'\n' read -r filespec || [ -n "$filespec" ]
	do
	    if [ ! "$isFirst" ] && [ -n "$betweenCommand" ]; then
		eval "$betweenCommand" <&3 || { exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	    fi

	    header="$filespec"
	    [ "$isHeaderBasename" ] && header="$(basename -- "$header")"

	    if [ "$isLocalDir" ]; then
		dirspec="$(dirname -- "$filespec")"
		if [ "$dirspec" != . -a "$dirspec" != "$PWD" ]; then
		    if ! cd "$dirspec" 2>/dev/null; then
			printf >&2 'ERROR: Cannot chdir to %s (for %s)!\n' "$dirspec" "$filespec"
			status=1; continue
		    fi
		fi
		filespec="$(basename -- "$filespec")"
	    fi

	    typeset -a f=("$filespec")	# No quoting, as array provides separation.
	    printf -v quotedFilespec '%q' "$filespec"
	    interpolatedCommands="${commands//"$fileMarker"/$quotedFilespec}"
	    [ "$interpolatedCommands" = "$commands" ] || f=()

	    reportProgress "$header"
	    (eval "${isHeader:+{}" "$interpolatedCommands" "${f[@]}" "${isHeader:+; \} $errorRedir | withHeader "${colorArg[@]}" --id '$EACHFILE_HEADER_ID' -- '$header'}") <&3 || \
		{ exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	    isFirst=
	done < <(eval '$fileSource "$@"' "${fileProcessor:+|}" "$fileProcessor")
	exit $status
	;;
esac
