#!/bin/bash

: ${WITHDEBUG_COMMAND_JOINER=;}
: ${WITHDEBUG_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-m|--module MODULE|'' [-m ...]|-M|--only-module MODULE|'' [-M ...]] --for COMMANDNAME [--for ...]|-c|--command \"COMMANDLINE\" [...] | --exec SIMPLECOMMAND [...] ${WITHDEBUG_EXEC_END} [--exec ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND while enabling debugging diagnostics for it. This is done by
adding the COMMAND's name to the \$DEBUG environment variable.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --for COMMANDNAME	Also enable debugging diagnostics for COMMANDNAME.
    --module|-m MODULE	Also enable debugging diagnostics for MODULE of the
			following COMMAND(s).
    --only-module|-M MODULE
			Just enable debugging diagnostics for MODULE of the
			following COMMAND(s), but not for the overall COMMAND
			itself.
    --[only-]module ''	Reset modules; following COMMAND(s) just print the over
			debugging diagnostics.
    --command|-c CMD	Execute CMD as a command-line.
    --exec CMD [...] ${WITHDEBUG_EXEC_END}	Execute CMD; all following arguments are taken to be arguments to the CMD until an argument consisting of '${WITHDEBUG_EXEC_END}' is encountered.
HELPTEXT
}

typeset -a modules=()
addModule()
{
    [ -n "$1" ] && modules+=("$1")
}

isOnly=
add()
{
    DEBUG+="${DEBUG:+,}${1:?}"
}
addDebug()
{
    local commandName="${1?}"; shift
    [ -n "$commandName" ] || return 1

    [ "$isOnly" ] || add "$commandName"

    for module in "${modules[@]}"
    do
	add "${commandName}:${module}"
    done
}
addDebugCommand()
{
    local cmd="${1:?}"; shift
    if ! addDebug "$(commandName --no-interpreter --eval "$cmd")"; then
	printf >&2 'ERROR: Could not determine command name for %s\n' "$cmd"
	return 1
    fi
}

commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--for)		shift
			addDebug "${1:?}"; shift
			;;
	--module|-m)	shift
			[ "$isOnly" ] && modules=()
			addModule "${1?}"; shift
			isOnly=
			;;
	--only-module|-M)
			shift
			[ "$isOnly" ] || modules=()
			addModule "${1?}"; shift
			isOnly=t
			;;
	--command|-c)	shift
			commands+="${commands:+ $WITHDEBUG_COMMAND_JOINER }$1"
			addDebugCommand "$1" || exit 2
			shift
			;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$WITHDEBUG_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${WITHDEBUG_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ $WITHDEBUG_COMMAND_JOINER }${cmd}"
			addDebugCommand "$cmd" || exit 2
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+="${commands:+ $WITHDEBUG_COMMAND_JOINER }${quotedSimpleCommand% }"
fi
if [ -z "$commands" ]; then
    echo "ERROR: No COMMAND(s) specified; need to pass -c|--command \"COMMANDLINE\", or --exec SIMPLECOMMAND [...] $WITHDEBUG_EXEC_END or SIMPLECOMMAND."
    echo
    printUsage "$0"
    exit 2
fi >&2

export DEBUG
eval "$commands"
