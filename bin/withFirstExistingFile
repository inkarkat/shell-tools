#!/bin/bash
set -o pipefail

: ${WITHFIRSTEXISTINGFILE_COMMAND_JOINER=;}
: ${WITHFIRSTEXISTINGFILE_EXEC_END=;}
: ${WITHFIRSTEXISTINGFILE_FILES_END=;}
: ${WITHFIRSTEXISTINGFILE_FILE_MARKER='{}'}
fileMarker="$WITHFIRSTEXISTINGFILE_FILE_MARKER"; unset WITHFIRSTEXISTINGFILE_FILE_MARKER

printShortUsage()
{
    local commonArgs="[-l|--local-dir] -c|--command \"COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] ${WITHFIRSTEXISTINGFILE_EXEC_END} [--exec ...] | SIMPLECOMMAND [...]"
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "${commonArgs} [--] FILE [...] [-?|-h|--help]"
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "-f|--files FILE [...] ${WITHFIRSTEXISTINGFILE_FILES_END} [-f ...] ${commonArgs} [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND on the first FILE (which ${fileMarker:+either }is appended${fileMarker:+ or replaces any
$fileMarker marker} inside COMMANDLINE) that exists.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --local-dir|-l	Change the directory to the one containing the existing
			FILE before executing COMMAND, and only pass the
			filename itself.
    --exec CMD [...] ${WITHFIRSTEXISTINGFILE_EXEC_END}	Execute CMD; all following arguments are taken to be
			arguments to the CMD until an argument consisting of
			'${WITHFIRSTEXISTINGFILE_EXEC_END}' is encountered.
    --files|-f FILE [...] ${WITHFIRSTEXISTINGFILE_FILES_END}
			Take FILE(s) separately, don't parse FILE(s) at the end;
			all arguments there belong to SIMPLECOMMAND.
SEE ALSO:
- eachFile executes COMMAND on each FILE individually, not just on the first.
- withSelectedFiles passes FILEs through a SELECT-COMMAND (which can generically
  filter any of those files, not just simply return the first file), and then
  passes the resulting list of file(s) on to COMMAND.

EXIT STATUS:
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	None of the passed FILE(s) exist.
    *   any exit status from COMMAND(s)
HELPTEXT
}

isLocalDir=
typeset -a filespecs=()
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--local-dir|-l)	shift; isLocalDir=t;;
	--files|-f)	shift
			while [ $# -gt 0 -a "$1" != "$WITHFIRSTEXISTINGFILE_FILES_END" ]
			do
			    filespecs+=("$1")
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --files|-f must be concluded with '${WITHFIRSTEXISTINGFILE_FILES_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			if [ ${#filespecs[@]} -eq 0 ]; then
			    echo 'ERROR: --files|-f must be followed by at least one FILE.'; echo; printUsage "$0"
			    exit 2
			fi >&2
			;;

	--exec)		shift
			cmd=
			printf -v escapedFileMarker %q "$fileMarker"
			while [ $# -gt 0 -a "$1" != "$WITHFIRSTEXISTINGFILE_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg//"$escapedFileMarker"/$fileMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${WITHFIRSTEXISTINGFILE_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ $WITHFIRSTEXISTINGFILE_COMMAND_JOINER }${cmd}"
			;;
	--command|-c)	shift; commands+="${commands:+ $WITHFIRSTEXISTINGFILE_COMMAND_JOINER }$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		typeset -a files=()
			if [ ${#filespecs[@]} -eq 0 ] && ! contains -- "$@"; then
			    # Consume arguments from behind. We need to encounter at least one existing
			    # file, but continue consuming existing files. This has the side effect that
			    # without --, leading non-existing FILE(s) are not dropped but passed to
			    # SIMPLECOMMAND as arguments. This may be a nice trick for a strange use case,
			    # though I would strongly prefer to use -- in all cases.
			    isFoundExistingFile=
			    while [ $# -gt 0 ]
			    do
				lastArg="${!#}"
				if [ -e "$lastArg" ]; then
				    isFoundExistingFile=t
				elif [ "$isFoundExistingFile" ]; then
				    # Stop before moving from existing to non-existing files.
				    break
				fi
				files=("$lastArg" "${files[@]}")
				set -- "${@:1:$(($#-1))}"
			    done
			fi

			if [ $# -gt 0 ]; then
			    typeset -a cmd=()
			    while [ $# -gt 0 ] && [ ${#filespecs[@]} -gt 0 -o "$1" != -- ]  # Note: No stopping at -- if --files is used.
			    do
				cmd+=("$1")
				shift
			    done
			    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
			    # undo the effects of eval.
			    printf -v quotedSimpleCommand '%q ' "${cmd[@]}"
			    printf -v escapedFileMarker %q "$fileMarker"
			    commands+="${commands:+ $WITHFIRSTEXISTINGFILE_COMMAND_JOINER }${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
			fi

			if [ ${#files[@]} -gt 0 ]; then
			    set -- "$@" "${files[@]}"
			    break
			fi
			;;
    esac
done
filespecs+=("$@")
if [ -z "$commands" ]; then
    echo "ERROR: No COMMAND(s) specified; need to pass -c|--command \"COMMANDLINE\", or --exec SIMPLECOMMAND [...] ${WITHFIRSTEXISTINGFILE_EXEC_END} or SIMPLECOMMAND."
    echo
    printUsage "$0"
    exit 2
elif [ ${#filespecs[@]} -eq 0 ]; then
    echo 'ERROR: No FILE(s) passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2

for filespec in "${filespecs[@]}"
do
    [ -e "$filespec" ] || continue

    if [ "$isLocalDir" ]; then
	filespec="$(realpath --no-symlinks -- "$filespec")" || exit 3	# Make absolute.
	dirspec="$(dirname -- "$filespec")"
	if [ "$dirspec" != . -a "$dirspec" != "$PWD" ]; then
	    if ! cd "$dirspec" 2>/dev/null; then
		printf >&2 'ERROR: Cannot chdir to %s (for %s)!\n' "$dirspec" "$filespec"
		exit 1
	    fi
	fi
	filespec="$(basename -- "$filespec")"
    fi

    typeset -a f=("$filespec")	# No quoting, as array provides separation.
    printf -v quotedFilespec '%q' "$filespec"
    interpolatedCommands="${commands//"$fileMarker"/$quotedFilespec}"
    [ "$interpolatedCommands" = "$commands" ] || f=()

    eval "$interpolatedCommands" "${f[@]}"
    exit $?
done
exit 4
