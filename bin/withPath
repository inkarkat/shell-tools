#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" 'ADD-PATH [-C|--clean] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-p|--path ADD-PATH [-p ...]|-P|--path-file PATH-FILE|- [-P ...] [-C|--clean] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '-C|--clean -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND while ADD-PATH is put at the front of \$PATH.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
This can be used to temporarily augment the PATH, or to give later PATH entries
a higher precedence.
    --path|-p ADD-PATH	ADD-PATH is put at the front of \$PATH.
    --path-file|-P PATH-FILE|-
			Each line from PATH-FILE (with -: standard input) is
			taken as a PATH entry to be added.
    --clean|-C		Start with just the PATH definition from
			/etc/environment, so all user-specific additions are
			dropped.
HELPTEXT
}

pathAdd=''
addPath()
{
    [ -z "$1" ] || pathAdd+="${pathAdd:+:}${1:?}"
}

isFirst=t
isClean=
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--path|-p)	shift; addPath "$1"; shift;;
	--path-file|-P)	shift
			filespec="$1"; [ "$filespec" = - ] && filespec=/dev/stdin
			while IFS=$'\n' read -r line || [ -n "$line" ]
			do
			    addPath "$line"
			done < "$filespec"
			shift
			;;
	--clean|-C)	shift; isClean=t;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		if [ "$isFirst" ]; then
			    addPath "$1"; shift
			else
			    break
			fi
			;;
    esac
    isFirst=
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("$@")
    fi
fi
if [ -z "$pathAdd" ] && [ ! "$isClean" ]; then
    echo 'ERROR: No ADD-PATH or -C|--clean passed.'
    echo
    printUsage "$0"
    exit 2
elif [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
fi >&2

if [ "$isClean" ]; then
    PATH="${pathAdd}${pathAdd:+:}$(pam_getenv PATH)" || exit $?
else
    PATH="${pathAdd}:$PATH"
fi
export PATH PATH_OVERRIDE=true

if [ "$isNeedEval" ]; then
    eval "${commands[@]}"
else
    "${commands[@]}"
fi
