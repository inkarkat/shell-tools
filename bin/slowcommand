#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" 'NUMBER[SUFFIX] [-b|--before NUMBER[SUFFIX]] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" 'NUMBER[SUFFIX] [-b|--before NUMBER[SUFFIX]] [--bare|[--initial-status NUM] [--trailing-prompt|--no-trailing-prompt] [--no-output-no-prompt] [--no-output-no-error] [--no-success-no-count|--no-count-on N] [--exit-on-success|--exit-on-failure|--exit-on NUM] [--emulate-prompt] [--worst-status] [--comment COMMENT] [--summarize-failed ERROR-TEXT [--summarize-failed-separator SEP]]] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND and make it last at least NUMBER[SUFFIX], sleeping some more if
necessary.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --before|-b NUMBER[SUFFIX]
			Sleep NUMBER[SUFFIX] before invoking COMMAND. This
			already counts towards the entire runtime.
    --bare		Do not print a status line before and after launching
			the COMMAND.
    --initial-status NUM    Customizations of the prompt emulation around
    --trailing-prompt	    COMMAND; cp. runWithPrompt
    --no-trailing-prompt
    --no-output-no-prompt
    --no-output-no-error
    --no-success-no-count
    --no-count-on N
    --exit-on-success
    --exit-on-failure	    (This also works with --bare.)
    --exit-on NUM
    --emulate-prompt
    --worst-status
    --comment COMMENT
    --summarize-failed ERROR-TEXT
    --summarize-failed-separator SEP
HELPTEXT
}

timeToSeconds()
{
    case "$1" in
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 'ERROR: Illegal duration: %s\n' "$1"; exit 2;;
    esac
    printf %s "$time"
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    '')			echo >&2 'ERROR: No duration (NUMBER[SUFFIX]) passed.'; echo >&2; printUsage "$0" >&2; exit 2;;
esac

duration="$(timeToSeconds "$1")" || exit $?; shift
before=
isBare=
isNeedEval=
typeset -a commands=()
typeset -a bashArgs=()
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--before|-b)	shift; before="$(timeToSeconds "$1")" || exit $?; shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--bare)		shift; isBare=t;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("$@")
    fi
fi

SECONDS=0
[ "$before" ] && sleep "$before"
if [ ${#commands[@]} -eq 0 ]; then
    if [ "$isBare" ]; then
	bash "${bashArgs[@]}" -
    else
	runWithPrompt "${runWithPromptArgs[@]}"
    fi
elif [ "$isNeedEval" ]; then
    eval "${commands[@]}"
else
    "${commands[@]}"
fi
status=$?
shortcoming=$((duration - SECONDS))
[ $shortcoming -gt 0 ] && sleep "$shortcoming"
exit $status
