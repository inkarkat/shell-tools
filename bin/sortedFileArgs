#!/bin/bash
shopt -qs extglob

: ${SORTEDFILEARGS_FILE_MARKER='{}'}
fileMarker="$SORTEDFILEARGS_FILE_MARKER"; unset SORTEDFILEARGS_FILE_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-c|-U|-S|-t|-v|-X [--sort=WORD] [-a|--all] [-I|--ignore=PATTERN] [-B|--ignore-backups] [-r|--reverse] [--group-directories-first] [--require-file] --command "COMMANDLINE" | SIMPLECOMMAND [...] [--] [FILE [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND with all FILE arguments in an order provided by ls (${fileMarker:+either }
appended${fileMarker:+ or replacing any $fileMarker marker} inside COMMANDLINE).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --require-file	Fail with 99 if no FILE arguments have been given.
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "-rv zgrep -h ' upgrade ' -- /var/log/dpkg.log*"
}

# In order to maintain the order of commands, we need to investigate beforehand
# whether eval is needed.
isNeedEval=
isRequireFile=
for arg
do
    case "$arg" in
	--require-file)	shift; isRequireFile=t;;
	--command|-c)	isNeedEval=t;;
	--)		break;;
    esac
done

typeset -a lsArgs=()
typeset -a commands=()
typeset -a simpleCommands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	-+([cUStvXaBr]))
			lsArgs+=("$1"); shift;;
	--@(all|ignore-backups|reverse|group-directories-first))
			lsArgs+=("$1"); shift;;
	-[I])		lsArgs+=("$1" "$2"); shift; shift;;
	--@(sort|ignore)=*)
			lsArgs+=("$1"); shift;;
	--@(sort|ignore))
			lsArgs+=("$1" "$2"); shift; shift;;

	--command)	shift; commands+=("$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		typeset -a files=()
			if ! contains '--' "$@"; then
			    # Consume existing FILEs from behind.
			    while [ $# -gt 0 ]
			    do
				lastArg="${!#}"
				[ -e "$lastArg" ] || break
				files=("$lastArg" "${files[@]}")
				set -- "${@:1:$(($#-1))}"
			    done
			fi

			if [ $# -gt 0 ]; then
			    typeset -a cmd=()
			    while [ $# -gt 0 ] && [ "$1" != '--' ]
			    do
				cmd+=("$1")
				shift
			    done
			    if [ "$isNeedEval" ]; then
				# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
				# undo the effects of eval.
				printf -v quotedSimpleCommand '%q ' "${cmd[@]}"
				printf -v escapedFileMarker %q "$fileMarker"
				commands+=(${commands:+;} "${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
			    else
				commands+=(${commands:+;} "${cmd[@]}")
			    fi
			fi

			if [ ${#files[@]} -gt 0 ]; then
			    set -- "$@" "${files[@]}"
			    break
			fi
			;;
    esac
done
if [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
elif [ ${#lsArgs[@]} -eq 0 ]; then
    echo 'ERROR: No ls arguments specified.'
    exit 2
elif [ "$isRequireFile" ] && [ $# -eq 0 ]; then
    echo 'ERROR: No FILE(s) passed.'
    exit 99
fi >&2

readarray -t files < <(ls --literal -1 "${lsArgs[@]}" -- "$@"; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
[ ${files[-1]} -ne 0 ] && exit ${files[-1]}
unset 'files[-1]'
[ -z "${files[-1]}" ] && unset 'files[-1]'


if [ "$isNeedEval" ]; then
    printf -v quotedFiles '%q ' "${files[@]}"; quotedFiles="${quotedFiles% }"
    typeset -a interpolatedCommands=("${commands[@]//"$fileMarker"/$quotedFiles}")
    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] && interpolatedCommands+=("$quotedFiles")

    eval "${interpolatedCommands[@]}"
else
    didInterpolate=
    typeset -a interpolatedCommands=()
    for c in "${commands[@]}"
    do
    if [ "$c" = "$fileMarker" ]; then
	interpolatedCommands+=("${files[@]}")
	didInterpolate=t
    else
	interpolatedCommands+=("$c")
    fi
    done
    [ "$didInterpolate" ] || interpolatedCommands+=("${files[@]}")

    "${interpolatedCommands[@]}"
fi
