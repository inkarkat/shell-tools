#!/bin/bash

: ${EDITOR:=vi}
: ${TEMPEDIT_EXEC_END=;}
: ${TEMPEDIT_FILE_MARKER='{}'}
fileMarker="$TEMPEDIT_FILE_MARKER"; unset TEMPEDIT_FILE_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: [TMPDIR=DIR] %q %s\n' "$(basename "$1")" "[-d|--directory DIR] [-b|--basename BASE] [-e|--extension EXT] -P|--no-print [-C|--cleanup] [--edit-empty] [-s|--sink-command \"COMMANDLINE\" [-s ...] | -S|--sink-exec SIMPLE-SINK-COMMAND [...] $TEMPEDIT_EXEC_END [-S ...] [-p|--print]] -c|--command \"COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] ${TEMPEDIT_EXEC_END} [--exec ...] [--] SIMPLECOMMAND [...] [-?|-h|--help]"
    echo
    printf 'Usage: cat FILE [...] | [TMPDIR=DIR] %q %s\n' "$(basename "$1")" "[-d|--directory DIR] [-b|--basename BASE] [-e|--extension EXT] -P|--no-print [-C|--cleanup] [--edit-empty] [-s|--sink-command \"COMMANDLINE\" [-s ...] | -S|--sink-exec SIMPLE-SINK-COMMAND [...] $TEMPEDIT_EXEC_END [-S ...] [-p|--print]]"
    echo
    printf 'Usage: cat FILE [...] | result=$([TMPDIR=DIR] %q %s)\n' "$(basename "$1")" "[-d|--directory DIR] [-b|--basename BASE] [-e|--extension EXT] [-P|--no-print [-C|--cleanup]] [--edit-empty] [-s|--sink-command \"COMMANDLINE\" [-s ...] | -S|--sink-exec SIMPLE-SINK-COMMAND [...] $TEMPEDIT_EXEC_END [-S ...] [-p|--print]]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Capture output from stdin / emitted by COMMAND into a temp file that is then
opened in $(basename -- "${EDITOR}") for editing, and if successful, the edited contents
are printed / passed to SINK-COMMAND (${fileMarker:+either }appended${fileMarker:+ or replacing any
$fileMarker marker }inside COMMANDLINE).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --directory|-d DIR	Use (and create) a subdirectory DIR inside the temp
			directory to store the temp file in.
    --basename|-b BASE	Use BASE as the prefix of the temp file name.
    --extension|-e EXT	Use EXT as the temp file extension.
    --no-print|-P	Just edit, but don't check or print the results.
    --cleanup|-C	When just editing, don't keep the temp file after the
			editor exits; the contents will be gone.
    --edit-empty	Also launch the (empty) editor if nothing got read from
			stdin.
    --sink-command|-s SINK-COMMAND
			Execute SINK-COMMAND as a command-line, ${fileMarker:+either }appending
			${fileMarker:+or replacing any $fileMarker marker }inside COMMANDLINE the temp
			filespec. Multiple SINK-COMMANDs are joined with | as
			pipeline steps.
    -S|--sink-exec SINK-COMMAND [...] $TEMPEDIT_EXEC_END
			Execute SINK-COMMAND as a command-line, ${fileMarker:+either }appending
			${fileMarker:+or replacing any $fileMarker marker }inside COMMANDLINE the temp
			filespec; all following arguments are taken to be
			arguments to the SINK-COMMAND until an argument
			consisting of '${TEMPEDIT_EXEC_END}' is encountered. Multiple SINK-COMMANDs
			are joined with | as pipeline steps.
    --command|-c CMD	The command whose output is captured. When this is a
			simple command, it can also be passed as such.
    --exec CMD [...] ${TEMPEDIT_EXEC_END}	The command whose output is captured; all following
			arguments are taken to be arguments to the CMD until an
			argument consisting of '${TEMPEDIT_EXEC_END}' is encountered.
HELPTEXT
}

cleanup() { :; }
EXEC=exec
subdir=
basename=
extension=
isEditEmpty=
isPrint=t
typeset -a sinkCommands=()
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--directory|-d)	shift; subdir="${1:?}"; shift;;
	--basename|-b)	shift; basename="$1"; shift;;
	--extension|-e)	shift; extension="$1"; shift;;
	--cleanup|-C)	shift; EXEC=''; [ "${DEBUG:-}" ] || trap 'cleanup' EXIT;;
	--edit-empty)	shift; isEditEmpty=t;;
	--no-print|-P)	shift; isPrint=;;
	--print|-p)	shift; isPrint=t;;
	--sink-command|-s)
			shift; sinkCommands+=(${sinkCommands:+|} "$1"); shift; isPrint=;;
	--sink-exec|-S)	shift
			cmd=
			printf -v escapedFileMarker %q "$fileMarker"
			while [ $# -gt 0 -a "$1" != "$TEMPEDIT_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg//"$escapedFileMarker"/$fileMarker}"	# %q escapes {}, we don't want that to have it interpolated later.
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: -S|--sink-exec command must be concluded with '${TEMPEDIT_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			sinkCommands+=(${sinkCommands:+|} "$cmd")
			isPrint=
			;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); shift;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$TEMPEDIT_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd="${cmd}${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${TEMPEDIT_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+=(${commands:+;} "$cmd")
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+=(${commands:+;} "${quotedSimpleCommand% }")
fi
if [ -z "$basename" ]; then
    if [ ${#commands[@]} -eq 0 ]; then
	basename="$(basename -- "$0")"
    else
	basename="$(commandName --eval "${commands[@]}")"
    fi
fi

if [ -n "$subdir" ]; then
    tempDirspec="${TMPDIR:-/tmp}/${subdir}"
    mkdir --parents -- "$tempDirspec" || exit 3
    readonly tempFilespec="$(TMPDIR="$tempDirspec" mktemp --tmpdir "${basename}-XXXXXX${extension:+.}${extension}" 2>/dev/null || echo "${tempDirspec}/${basename}.$$${RANDOM}${extension:+.}${extension}")"
else
    readonly tempFilespec="$(mktemp --tmpdir "${basename}-XXXXXX${extension:+.}${extension}" 2>/dev/null || echo "${TMPDIR:-/tmp}/${basename}.$$${RANDOM}${extension:+.}${extension}")"
fi
cleanup()
{
    [ ! -e "$tempFilespec" ] || rm --force "$tempFilespec" 2>/dev/null
}

if [ ${#commands[@]} -eq 0 ]; then
    cat
else
    eval "${commands[@]}"
fi > "$tempFilespec"

[ "$isEditEmpty" ] || [ -s "$tempFilespec" ] || { cleanup; exit 1; }

exec </dev/tty	# Reconnect stdin to terminal, to avoid that Vim complains that input is not from a terminal.
if [ "$isPrint" ] || [ ${#sinkCommands[@]} -gt 0 ]; then
    exec 3>&1 1>/dev/tty	# Reconnect stdout to terminal, to avoid that Vim complains that output is not to a terminal
    [ "${DEBUG:-}" ] || trap 'cleanup' EXIT

    tmpModTime=$(stat -c %Y "$tempFilespec")
    "$EDITOR" "$tempFilespec" || { status=$?; echo >&2 'Unclean exit of editor; aborting!'; exit $status; }
    newModTime=$(stat -c %Y "$tempFilespec") || { echo >&2 'The tempfile disappeared; aborting!'; exit 4; }

    exec 1>&3	# Restore original stdout.

    [ $newModTime -eq $tmpModTime ] && exit 99
    [ ! "$isPrint" ] || cat -- "$tempFilespec"
    if [ ${#sinkCommands[@]} -gt 0 ]; then
	typeset -a f=("$tempFilespec")
	printf -v quotedTempFilespec '%q' "$tempFilespec"
	typeset -a interpolatedCommands=("${sinkCommands[@]//"$fileMarker"/$quotedTempFilespec}")
	[ "${interpolatedCommands[*]}" = "${sinkCommands[*]}" ] || f=()
	eval "${interpolatedCommands[@]}" '"${f[@]}"'
    fi
else
    $EXEC "$EDITOR" "$tempFilespec"
    exit $?
fi
